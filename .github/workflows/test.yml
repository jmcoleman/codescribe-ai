name: Tests

on:
  # Run on PRs to main or develop
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'private/**'
      - '.gitignore'
      - 'LICENSE'
      - '**.txt'
  # Run on pushes to main or develop
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'private/**'
      - '.gitignore'
      - 'LICENSE'
      - '**.txt'
  # Allow manual triggering from GitHub UI
  workflow_dispatch:

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: cd server && npm ci

      - name: Run unit tests
        run: cd server && npm run test:unit
        env:
          NODE_ENV: test
          CLAUDE_API_KEY: test-key-12345

      - name: Run integration tests
        run: cd server && npm run test:integration
        env:
          NODE_ENV: test
          CLAUDE_API_KEY: test-key-12345

      - name: Generate coverage report
        run: cd server && npm run test:coverage
        env:
          NODE_ENV: test
          CLAUDE_API_KEY: test-key-12345

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./server/coverage/coverage-final.json
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Check coverage thresholds
        run: cd server && npm run test:ci
        env:
          NODE_ENV: test
          CLAUDE_API_KEY: test-key-12345

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: cd client && npm ci

      - name: Run tests
        run: cd client && npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./client/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install backend dependencies
        run: cd server && npm ci

      - name: Check code formatting (backend)
        run: cd server && npx prettier --check "src/**/*.js"
        continue-on-error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Audit backend dependencies
        run: cd server && npm audit --audit-level=moderate
        continue-on-error: true

      - name: Audit frontend dependencies
        run: cd client && npm audit --audit-level=moderate
        continue-on-error: true

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    # Only deploy if all tests passed
    needs: [test-backend, test-frontend, lint, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Trigger Vercel Deploy Hook
        run: |
          echo "ðŸš€ All tests passed! Triggering Vercel deployment..."
          curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK }}"
          echo "âœ… Deployment triggered successfully"
